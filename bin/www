#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('aixiu-server:server');
var http = require('http');
var cluster = require('cluster');
var numCPUs = require('os').cpus().length;
var io = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
if (cluster.isMaster) {
  // Fork workers
  for (var i = 0; i < numCPUs; i++) {
    cluster.fork();
  }
  cluster.on('exit', function(worker, code, signal) {
    console.log('worker ' + worker.process.pid + ' died');

    // 重启进程
    cluster.fork();
    console.log('died worker restarted');
  });
} else {

  var httpServer = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  // socket服务
  var socketServer = io(httpServer);

  httpServer.listen(port,function(){
    console.log('listening on *:3000');
  });
  httpServer.on('error', onError);
  httpServer.on('listening', onListening);

  // socket监听
  socketServer.on('connection', function(socket){
    console.log('a user connected');

    socket.on('disconnected',function(){
      console.log('user disconnected');
    });

    socket.on('chat message', function(msg){
      console.log('message: ' + msg);
      socket.emit('chat message',{msg:'hello'});
    });
  });

  // 接收到终止主进程信号
  process.on('SIGINT',function(){
    // TODO:
    console.log('main proccess died!');
  });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
